<div style={{textAlign:"center"}}>
                <br /><br />
            <Table responsive="xs" style={{paddingLeft:90}}>
                <thead>
                  <tr>
                    <th style={{paddingLeft:65, paddingRight:65}}>Item</th>
                    <th style={{paddingLeft:65, paddingRight:65}}>Name</th>
                    <th style={{paddingLeft:65, paddingRight:65}}>Price</th>
                    <th style={{paddingLeft:65, paddingRight:65}}>Quantity</th>
                    <th></th>
                     </tr>
                    </thead>
    
                    {/* {this.props.db.cart.map((item,i)=> */}
          
    
                      <tr>
                  
                  <td>
                    {/* <Link to='/item1/'><img src={`/${item.image}`} id="hh" onClick={()=> this.props.itemDetail(item)}></img></Link> */}
                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQ9W-NPX6OPelnr9ezxXuPeTWzrbuZtj_xxf_Wg9AGcFbLgZRSa" style={{height:150, width:150}} />
                    </td>
                  <td>
                      {/* {item.name} */}
                      <h6 style={{paddingLeft:65, paddingRight:65}}>Pendant</h6>
                      
                      <p style={{paddingLeft:65, paddingRight:65, textAlign:"center"}}>Sample information about this pendant</p>
                      </td>
                  <td style={{color:"darkred"}}>
                      {/* {item.price} */}
                      <h6 style={{paddingLeft:65, paddingRight:65}}>sample price</h6>
                      </td>
                  <td>
                      <form style={{paddingLeft:65, paddingRight:65}}>
                    <select >
                      
                    <option>1</option>
                    <option>2</option>
                    <option>3</option>
                    <option>4</option>
                    <option>5</option></select>
                    </form>
                    </td>
                    
                    <td style={{paddingLeft:65, paddingRight:65}}><Link to="/cart"><DeleteIcon /></Link></td>
                  
                </tr>
                      
                 
                 </Table> 
                 <h2 >Total : "price"</h2>
    <br></br>
     
     <Button variant="contained"> 
    Proceed To Checkout
     </Button>
     <br />
     <br />
                 </div>


                 
                 
                 
                 
                 
                 cart page

                 const styles = theme => ({
    '@global': {
      body: {
        backgroundColor: theme.palette.common.white,
      },
    },
    paper: {

      marginTop: theme.spacing(2),
      marginBottom: theme.spacing(2),
      display: 'flex',
      flexDirection: 'row', 

    }
    ,
    check: {
      marginTop: theme.spacing(2),
      display: 'flex',
      flexDirection: 'column',
      alignItems: "center"
    }
});


class Cart extends Component{
    constructor(props){
        super(props)

    }


    render(){
        const { classes } = this.props;


        return(
<div>
    <Grid container space={3}>
        
       
<Grid md={8} lg={8} sm={12} xs={12} container space={3} style={{marginTop:"15px", paddingLeft:'10px'}}>
    
<Paper style={{ marginBottom: "10px", backgroundColor: 'rgb(251, 249, 249)' }}>
          <div className={classes.paper}>

<Grid md={6} lg={6} sm={6} xs={6} >

<center><img class="img-fluid" src='https://cdn.shopify.com/s/files/1/0789/0141/products/D7302TZ_1024x1024.png?v=1541094254' style={{maxHeight:280,paddingLeft:'10px', maxWidth:280, height:'auto', width:'100%'}}  /></center>

</Grid>
<Grid  md={6} lg={6} sm={6} xs={6} container space={2} >
    <Grid md={6} lg={6} sm={12} xs={12} container space={2} style={{paddingLeft:'20px'}}>
        
<h6 style={{ textAlign:'center', color:'black'}}>Product Name</h6>
<p>Sample Description about the product</p><br />
<Grid md={6} lg={6} sm={8} xs={8}>
<div class="input-group plus-minus-input" style={{display:'inline'}}>
  <form>
  <div class="input-group-button" style={{display:'inline'}}>
    <button type="button" class="button hollow circle" data-quantity="minus" data-field="quantity" style={{display:'inline'}}>
      <i class="fa fa-minus" aria-hidden="true"></i>
    </button>
  </div>
  <input class="input-group-field" type="text" name="quantity" value="0" size="1" style={{display:'inline', textAlign:'center'}} />
  <div class="input-group-button" style={{display:'inline'}}>
    <button type="button" class="button hollow circle" data-quantity="plus" data-field="quantity" style={{display:'inline'}}>
      <i class="fa fa-plus" aria-hidden="true"></i>
    </button>
  </div>
  </form>
</div>


                    </Grid>
                    <Grid md={6} lg={6} sm={4} xs={4}>
                    <DeleteIcon />
</Grid>
</Grid>
<Grid md={6} lg={6} sm={12} xs={12}>
<h6 style={{ textAlign:'center', color:'black'}}>999/- Rs.</h6>
    </Grid>
</Grid>
</div>
</Paper>

</Grid>

<Grid md={4} lg={4} sm={12} xs={12} >
<Paper style={{ margin: "10px", backgroundColor: "rgb(251, 249, 249)" }}>
          <div className={classes.check}>
              
    <h2 style={{ paddingTop:'15px', textAlign:'center'}}>Checkout</h2>
    <h6 style={{color:'black'}}>SubTotal: 999</h6>
    <br />
    <Button variant="contained">Proceed To Buy</Button> 
     <br />
    
   </div>
   </Paper>
</Grid>

    </Grid>


</div>

        )
    }

}
export default withStyles(styles)(Cart);






cart add DeleteIcon
  {/* <RemoveIcon class="input-group-button" style={{display:'inline', width:'20'}} /> */}
{/* <p class="input-group-field" style={{display:'inline', paddingTop:'0px'}}>0</p> */}
  {/* <AddIcon class="input-group-button" style={{display:'inline', width:'20px'}} /> */}







  this is previous header

  import React from "react";
import PropTypes from "prop-types";
import AppBar from "@material-ui/core/AppBar";
import Link from "@material-ui/core/Link";
import Paper from "@material-ui/core/Paper";

import Toolbar from "@material-ui/core/Toolbar";
import IconButton from "@material-ui/core/IconButton";
import Typography from "@material-ui/core/Typography";
import InputBase from "@material-ui/core/InputBase";
import MenuItem from "@material-ui/core/MenuItem";
import { fade } from "@material-ui/core/styles/colorManipulator";
import { withStyles } from "@material-ui/core/styles";
import SearchIcon from "@material-ui/icons/Search";
import SubNav from "./SubNav";
import PersonIcon from "@material-ui/icons/Person";
import ShoppingCartIcon from '@material-ui/icons/ShoppingCart';
import ShoppingBasketIcon from '@material-ui/icons/ShoppingBasket';
import PersonAddIcon from "@material-ui/icons/PersonAdd";
import Drawer from "@material-ui/core/Drawer";
import Divider from "@material-ui/core/Divider";
import DehazeIcon from "@material-ui/icons/Dehaze";
import APIUrl from "../utils/APIUrl";
import callApi from "../utils/callApi";
import { login, isLogin, logout, getLoginData } from '../utils/session';
import { Redirect, withRouter } from "react-router-dom";
import Badge from '@material-ui/core/Badge';



const StyledBadge = withStyles(theme => ({
  badge: {
    right:-5,
    top:4,
    border: `2px solid ${theme.palette.background.paper}`,
    marginRight:'15px'
  },
}))(Badge);







const drawerWidth = "100%";
const styles = theme => ({
  root: {
    width: "100%"
  },
  grow: {
    flexGrow: 1
  },
  menuButton: {
    marginLeft: -12,
    marginRight: 20
  },
  title: {
    display: "none",
    [theme.breakpoints.up("sm")]: {
      display: "block"
    }
  },
  search: {
    position: "relative",
    borderRadius: theme.shape.borderRadius,
    backgroundColor: fade(theme.palette.common.white, 0.15),
    "&:hover": {
      backgroundColor: fade(theme.palette.common.white, 0.25)
    },
    marginRight: theme.spacing(2),
    marginLeft: 0,
    width: "100%",
    [theme.breakpoints.up("sm")]: {
      marginLeft: theme.spacing(3),
      width: "auto"
    }
  },
  drawer: {
    width: drawerWidth,
    flexShrink: 0
  },
  drawerPaper: {
    width: drawerWidth
  },
  drawerHeader: {
    display: "flex",
    alignItems: "center",
    padding: "0 8px",
    ...theme.mixins.toolbar,
    justifyContent: "flex-end"
  },
  searchIcon: {
    width: theme.spacing(9),
    height: "100%",
    position: "absolute",
    pointerEvents: "none",
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  },
  inputRoot: {
    color: "inherit",
    width: "100%"
  },
  inputInput: {
    paddingTop: theme.spacing(1),
    paddingRight: theme.spacing(1),
    paddingBottom: theme.spacing(1),
    paddingLeft: theme.spacing(10),
    transition: theme.transitions.create("width"),
    width: "100%",
    [theme.breakpoints.up("md")]: {
      width: 200
    }
  },
  sectionDesktop: {
    display: "none",
    [theme.breakpoints.up("md")]: {
      display: "flex"
    }
  },
  sectionMobile: {
    display: "flex",
    [theme.breakpoints.up("md")]: {
      display: "none"
    }
  }
});

class PrimarySearchAppBar extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      anchorEl: null,
      mobileMoreAnchorEl: null,
      category: [],
      subCategoryList: [],
      search: [],
      loading: true,
      searchText: "",
      logout: false
    };
  }

  static getDerivedStateFromProps(nextProps, prevProps) {
    if (prevProps.category.length !== nextProps.category.length) {

      return {
        category: nextProps.category
      };
    }

    // Return null if the state hasn't changed
    return null;
  }

  onSearchChange = e => {
    this.setState({
      searchText: e.target.value
    });

    const requestOptions = {
      method: "GET",
      url: APIUrl.url.Search,
      params: {
        search: e.target.value
      }
    };

    callApi(requestOptions, (err, response) => {
      if (err) {
        return;
      }
      // this.props.dispatch({
      //   type: "SEARCH_LIST",
      //   payload: { searchList: response.data.product }
      // });
     
      
      this.setState({
        search: response.data.product,
        loading: true
      });
    });
  };

  handleSubmit = e => {
    e.preventDefault();
    this.props.onSearch(this.query.value);
    e.currentTarget.reset();
  };
  
  handleProfileMenuOpen = event => {
    this.setState({ anchorEl: event.currentTarget });
  };

  handleMenuClose = () => {
    this.setState({ anchorEl: null });
    this.handleMobileMenuClose();
  };
  handleDrawerOpen = () => {
    this.setState({ open: true });
  };

  handleDrawerClose = () => {
    this.setState({ open: false });
  };
  handleMobileMenuOpen = event => {
    this.setState({ mobileMoreAnchorEl: event.currentTarget });
  };

  handleMobileMenuClose = () => {
    this.setState({ mobileMoreAnchorEl: null });
  };


  render() {
    let a = 0;
    const { mobileMoreAnchorEl,search } = this.state;
    const { classes } = this.props;
    // const isMenuOpen = Boolean(anchorEl);
    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);
    const { open, category, searchText } = this.state;



    const renderMobileMenu = (
      <Drawer
        className="login-register-drawer"
        anchorEl={mobileMoreAnchorEl}
        anchorOrigin={{ vertical: "top", horizontal: "right" }}
        transformOrigin={{ vertical: "top", horizontal: "right" }}
        open={isMobileMenuOpen}
        onClose={this.handleMenuClose}
      >
        <br />


        {
          isLogin() ? 

          <MenuItem>
               Welcome! {getLoginData().name}
        </MenuItem> 
        :

        <MenuItem>
          <Link href="/Login">
            <PersonIcon />
            <span>Login</span>
          </Link>
        </MenuItem> 

       } 
       

       {
          isLogin() ? 

          <MenuItem  onClick={() => {
            logout();
              this.setState({logout:true});
           
          }}> 
            <PersonIcon />
            <span>Logout</span>
         </MenuItem> 
        :
        
        <MenuItem>
        <Link href="/Register">
          <PersonAddIcon />
          <span>Register</span>
        </Link>
      </MenuItem>

       } 
      
      </Drawer>
    );

    if (this.state.logout === true) {

      this.setState({logout : false});
      return <Redirect to='/' />
    }



    return (
      <div>
        <div className={classes.root}>
          <AppBar position="static">
            <Toolbar>
              <div className={classes.sectionMobile}>
                <IconButton
                  style={{ float: "right" }}
                  aria-haspopup="true"
                  onClick={this.handleMobileMenuOpen}
                  color="inherit"
                >
                  <DehazeIcon />
                </IconButton>
                
              </div>
              <Link href="/">
                <img
                  style={{
                    height: "56px",
                    marginLeft: "20px",
                    marginTop: "5px",
                    marginRight: "24px",
                    marginBottom: "4px"
                  }}
                  src="/logo.jpg"
                  alt=""
                />{" "}
              </Link>

              

              <div className={classes.grow} />
              <div
                style={{ marginRight: "10px" }}
                className={classes.sectionDesktop}
              >
                <div
                  style={{ backgroundColor: "whitesmoke",height:'40px',marginTop:'10px', outline: "auto", textAlign:"center", marginRight:'150px' }}
                  className={classes.search}
                >
                  <div style={{marginTop:"4px"}} className={classes.searchIcon}>
                    
                    <SearchIcon style={{marginTop:'5x'}}/>
                     
                  </div>
                  <InputBase
                    style={{ marginTop: "4px", width:'400px'}}
                    onChange={this.onSearchChange}
                    name="searchText"
                    value={searchText}
                    placeholder="Search"
                    onClick={this.handleDrawerOpen}
                    classes={{
                      root: classes.inputRoot,
                      input: classes.inputInput
                    }}
                  />
                </div>
                
                

                <Link href="/cart">
        <p
        style={{marginTop:'2px'}}
        >
              <IconButton aria-label="cart">

      <StyledBadge badgeContent={this.props.cartItemCount} color="primary">
        <ShoppingCartIcon style={{ color:'#515151'}}/>
      </StyledBadge>
    </IconButton>
          
        </p>
      </Link>

                
                
             
                {
          isLogin() ? 

          <p
          style={{
          
            fontFamily: "Helvetica",
            color:'#515151',
            fontSize: '12px',
            marginTop:'16px'
          }}
        >
        <span className="vertical-align-super">Welcome! {getLoginData().name}</span>
        </p>
        :


        <Link href="/Login">
        <p
          style={{
            color : '#515151',
            fontFamily: "Helvetica",
            marginRight : '12px'

          }}
        >
          <span className="vertical-align-super">LOGIN</span>
        </p>
      </Link>


       } 

{
          isLogin() ? 

          <p
          style={{
          
            fontFamily: "Helvetica",
            fontSize: '12px',
            color:'#515151'
          }}

          onClick={() => {
            logout();
              this.setState({logout:true});
           
          }}
        >
          <span className="vertical-align-super">LOGOUT</span>
        </p>
        :

        <Link href="/Register">
        <p
          style={{
            // marginTop: "10px",
            // fontSize: "16px",
            fontFamily: "Helvetica",
            color:'#515151',
            fontSize: '12px'
          }}
        >
          <span className="vertical-align-super">REGISTER</span>
        </p>
      </Link>


       } 



              
              </div>

              <div className={classes.sectionMobile}>
                <SearchIcon  
                  style={{ position:'relative',display:'inline',marginLeft:'0px',paddingLeft:'0px', paddingRight:'0px', height:'40px', width:'40px' }}
                  color="inherit"
                  aria-label="Open drawer"
                  onClick={this.handleDrawerOpen}
                /> 
                   
      <StyledBadge badgeContent={this.props.cartItemCount} color="primary" style={{display:'inline'}}>
      <Link href='/cart'><ShoppingCartIcon style={{ display:'inline',color:'black', paddingRight:'8px',marginLeft:"0px",marginRight:'0px',  height:'40px', width:'40px'}}/></Link>
      </StyledBadge>
      
              </div>
            </Toolbar>
          </AppBar>
          <Drawer
            className={classes.drawer}
            variant="persistent"
            anchor="bottom"
            open={open}
            classes={{
              paper: classes.drawerPaper
            }}
          >
          
            <Divider />

            <div
            
            style={{
              backgroundColor: "whitesmoke",
              outline: "auto",
              padding: "10px",
            }}
            
            >
            <div
              style={{
                backgroundColor: "whitesmoke",
                outline: "auto",
                marginTop: "0px",
                display : 'flex'
              }}
              className={classes.search}
            >

              
              <div className={classes.searchIcon}>
                <SearchIcon />
              </div>
              <InputBase
                style={{ marginTop: "4px" }}
                onChange={this.onSearchChange}
                name="searchText"
                value={searchText}
                placeholder="Search"
                classes={{
                  root: classes.inputRoot,
                  input: classes.inputInput
                }}
              >
              
                </InputBase>

                <div className={classes.drawerHeader}>
              <IconButton style={{ fontSize: '30px', color: 'black' }} onClick={this.handleDrawerClose}>x</IconButton>
            </div>
            </div>

           <div >
           <div  style={{ padding: "20px" }}>
              <Typography varient="subtite-1"> SUGGESTIONS</Typography>
             {search.length === 0 ? "No product found" :  search.map((data,index) => (
                <Link 
                key={`search-cat-${index}`}
                href={`/details/${data.product_id}`}
                 data={category}>
                   <Paper style={{padding: '12px', marginBottom: '4px'}}>
                  <li key={index} style={{ fontSize: "16px", color: '#515151' }}>{data.name}</li>
                  </Paper>
                </Link>
              ))}
            </div>
           <div  style={{ padding: "20px" }}>
              <Typography varient="subtite-1"> Suggested Categories</Typography>
              {category.map((data,index) => (
                <Link 
                key={`search-cat-${index}`}
                href={`/products/${data.catId}/${a}`}
                 data={category}>
                  <li key={index} style={{ fontSize: "13px" }}>{data.name}</li>
                </Link>
              ))}
            </div>
            
           </div>

           </div>
          </Drawer>
          {renderMobileMenu}
        </div>
        <SubNav category={category} />
      </div>
    );
  }
}

PrimarySearchAppBar.propTypes = {
  classes: PropTypes.object.isRequired
};

export default withStyles(styles)(PrimarySearchAppBar);




increase badge content 
this.props.addToCart(this.state.ProductDetails)


import React, { Component } from 'react';
// import { Table} from 'react-bootstrap';
import Button from "@material-ui/core/Button";
import DeleteIcon from '@material-ui/icons/Delete';
import { Grid, Container,Paper, Link } from '@material-ui/core';
import { withStyles } from '@material-ui/core/styles';
import RemoveShoppingCartIcon from '@material-ui/icons/RemoveShoppingCart';
import Tooltip from '@material-ui/core/Tooltip';
import { getLoginData } from '../utils/session';
import axios from "axios";
import APIUrl from "../utils/APIUrl";
import AddIcon from '@material-ui/icons/Add';
import RemoveIcon from '@material-ui/icons/Remove';
import { isLogin} from '../utils/session';





const styles = theme => ({
  '@global': {
    body: {
      backgroundColor: theme.palette.common.white,
    },
  },
  sectionDesktop: {
    display: "flex",
    width:'100%',
    flexDirection:'row'
  },
  sectionMobile: {
    display: "flex",
    [theme.breakpoints.up("md")]: {
      display: "none"
    }
  },
  root: {
    width: "100%"
  },
  grow: {
    flexGrow: 1
  }
});


class Cart extends Component{
  constructor(props){
      super(props)
      this.state={
        ProductDetails:"",
        count:0,
        product_id:"",
        quantity:"",
        user_id:" ",
        status:" ",
      show: true
      }
  }

  handleSubmit(productDetail){
    const { product_id, quantity, user_id, status } = this.state;
    const userdata = { product_id:productDetail.product_id, quantity:productDetail.quantity,user_id:getLoginData().user_id, status:'exist' };
    console.log(userdata);
  


    // convert json to form data with '&' seprater
    const data = Object.keys(userdata)
      .map(key => {
        return (
          encodeURIComponent(key) + "=" + encodeURIComponent(userdata[key])
        );
      })
      .join("&");
    const requestOptions = {
      method: 'POST',
      url: APIUrl.url.AddToCart,
      data:data,

    };

    axios(requestOptions)
      .then(response => {
        this.props.addToCart(productDetail);
      })
      .catch(err => { });
  };


  IncrementItem(p){
    let plus=p.quantity++;
    this.setState({ quantity: plus });
  }
  DecreaseItem(p){
    let minus= p.quantity--;
    this.setState({ quantity: minus});
  }
  
  processOrder(){
    const { user_id } = this.state;
    const processdata = { user_id:getLoginData().user_id};

    console.log(processdata);
  
    // convert json to form data with '&' seprater
    const data1 = Object.keys(processdata)
      .map(key => {
        return (
          encodeURIComponent(key) + "=" + encodeURIComponent(processdata[key])
        );
      })
      .join("&");
    const requestOptions1 = {
      method: 'POST',
      url: APIUrl.url.ProcessOrder,
      data:data1,

    };

    axios(requestOptions1)
      .then(response => {
      })
      .catch(err => { });
  };



  componentDidMount() {
    var counter1 = JSON.parse(localStorage.getItem("Cart"))
    if (counter1 != this.state.count) {
        this.setState({ count: counter1 })
    }  
    };
  
    refreshPage(){
      window.location.reload();
      console.log('refresh done')
  } 


componentDidUpdate() {
    var counter1 = JSON.parse(localStorage.getItem("Cart"))
    if (counter1 != this.state.count) {
        this.setState({ count: counter1 })
    }
}

orderPlaced(){
  alert("your order has been placed")
    window.location.reload();
}

getValue(e){
  let x=e.target.value;
  this.setState({
      search:x
  })
      }

  render(){
    
    
if(this.props.cartItemCount>0){
      return(


<div style={{padding:"10px"}}>
<hr />
  <p>Shopping Cart</p>
  <hr />
  <Container maxWidth="lg">
<Grid item xs={12} sm={12}>
<Paper style={{ width: "100% ! important" }}>

  <Grid container space={3}>
    <Grid md={8} lg={8} container space={3}>
    <hr style={{width:"95%"}}/>
  {this.props.cart.map(p=>

<Grid md={12} lg={12} sm={12} xs={12} container space={3} >
  

<Grid md={4} lg={4} sm={6} xs={6} >
<Link href={`/Details/${p.product_id}`}>
<center><img class="img-fluid" src={p.url} style={{maxHeight:120, maxWidth:120, height:'auto', width:'100%', border:"solid #515151 1px"}}  /></center>
</Link>
</Grid>
<Grid  md={8} lg={8} sm={6} xs={6} container space={2} >
<Grid md={3} lg={3} sm={12} xs={12}>      
  <div style={{ textAlign:'center',color:'black', display:'block',fontSize:'14px'}}>{p.product_name}</div>
  </Grid>
  <Grid md={3} lg={3} sm={12} xs={12}>
  <div style={{ textAlign:'center', color:'black',fontSize:'14px',fontWeight:'bold'}}>{p.price}/- Rs. </div>
  </Grid>
  
    <Grid md={3} lg={3} sm={8} xs={8}  style={{textAlign:'center'}}>


{/* <form>
  <select defaultValue={p.quantity} onClick={()=> this.handleSubmit(p)} style={{width:"40px"}} onChange={(e)=>{this.props.changeQuantity(p,e)}}>
    <option>0</option>
    <option>1</option>
    <option>2</option>
    <option>3</option>
    <option>4</option>
    <option>5</option>
    <option>6</option>
    <option>7</option>

  </select>
</form> */}
              
              
        <AddIcon onClick={()=>{this.IncrementItem(p); this.handleSubmit(p)}} style={{display:'inline',color:'black', height:'20px', width:"20px"}}/>
          <div style={{display:'inline', verticalAlign:'super',paddingLeft:'10px',color:'black',fontWeight:'bold', paddingRight:'10px'}}>{p.quantity}</div>
        <RemoveIcon style={{display:'inline', color:'black', height:'20px', width:"20px"}} onClick={()=> {this.DecreaseItem(p); this.handleSubmit(p)}} />
        


                  </Grid>
                  <Grid md={3} lg={3} sm={4} xs={4}>
                    <Tooltip title="Delete">
                    <DeleteIcon style={{alignItems:'center',height:'40px', width:'40px'}}  onClick={()=> this.handleSubmit(Object.assign(p, {quantity: 0}))}/>
                    </Tooltip>

</Grid>


</Grid>

<hr style={{width:"95%"}}/>


</Grid>)}
</Grid>

<Grid md={4} lg={4} sm={12} xs={12} >
  
  <div style={{ padding:'20px', paddingTop:'8px'}}>
<div style={{border:'solid goldenrod 1px', textAlign:'center'}}>
            
  <h2 style={{paddingTop:'4px', textAlign:'center'}}>CHECKOUT</h2>
  <h6 style={{color:'black'}}>Total: {this.props.cart.reduce((sum,p)=>sum+p.price*p.quantity,0)}/- Rs.</h6>
  
  <Button variant="contained" style={{backgroundColor:'black', color:'white'}}
  onClick={()=>{ this.processOrder(); this.orderPlaced()}}
  >Proceed To Buy</Button> 
   <br /><br />
   </div>
   </div>
   {/* <center><Button variant="contained" style={{backgroundColor:'black', color:'white', alignItems:'center'}}>  Continue Shopping </Button> </center> */}

</Grid>
  </Grid>
  </Paper>
  </Grid>  
</Container>
</div>


)
    }
  else{
    return(
      

        <div style={{padding:'20px'}}>
        <Paper style={{ width: "100% ! important" }}>
        <div style={{alignItems:'center',textAlign:'center', paddingTop:'100px', paddingBottom:'80px' }}>
          <div>
         < RemoveShoppingCartIcon style={{ color:'grey', height:'100px ', width:'100%' }} />
         </div><br />
         <div style={{ color:'grey', fontSize:'24px'}}>Your cart is empty !!!</div>
        </div>
        </Paper>
        </div>
       
    )
  }
  }

}

export default withStyles(styles)(Cart);